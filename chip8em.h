#include <cstddef>


typedef uint8_t u8;
typedef uint16_t u16;
typedef uint64_t u64;

u8 chip8_fontset[80] =
{ 
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

class Chip8 {
  typedef void (Chip8::*Chip8Instruction)();
  public:
  void initialize();

  private:
  u8 memory[4096] = {0};
  u8 V[16]; // register file
  u16 I; // index register
  u16 pc; // program counter
  u16 sp; // stack pointer
  u64 gfx[32]; // screen, 64 x 32
  u16 opcode;
  u8 delay_timer, sound_timer;
  u16 stack[16]; // stack

  Chip8Instruction* instructions[16] = {
    nullptr, // 0
    nullptr, // 1
    nullptr, // 2
    nullptr, // 3
    nullptr, // 4
    nullptr, // 5
    nullptr, // 6
    nullptr, // 7
    nullptr, // 8
    nullptr, // 9
    nullptr, // A
    nullptr, // B
    nullptr, // C
    nullptr, // D
    nullptr, // E
    nullptr  // F
  };

};

